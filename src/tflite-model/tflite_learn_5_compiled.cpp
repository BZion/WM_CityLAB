/* Generated by Edge Impulse
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
// Generated on: 19.09.2023 11:03:47

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#define EI_MAX_SCRATCH_BUFFER_COUNT 4
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 10128;
#else
constexpr int kTensorArenaSize = 9104;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};
enum used_operators_e {
  OP_RESHAPE, OP_CONV_2D, OP_MAX_POOL_2D, OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};
struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};
struct NodeInfo_t { // subset of TfLiteNode used for initialization from constant memory
  struct TfLiteIntArray* inputs;
  struct TfLiteIntArray* outputs;
  void* builtin_data;
  used_operators_e used_op_index;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];
TfLiteNode tflNodes[11];

const TfArray<2, int> tensor_dimension0 = { 2, { 1,3960 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0037837009876966476, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(16) int32_t tensor_data1[4] = { 1, 1, 99, 40, };
const TfArray<1, int> tensor_dimension1 = { 1, { 4 } };
const ALIGN(16) int32_t tensor_data2[4] = { 1, 99, 1, 8, };
const TfArray<1, int> tensor_dimension2 = { 1, { 4 } };
const ALIGN(16) int32_t tensor_data3[4] = { 1, 1, 50, 8, };
const TfArray<1, int> tensor_dimension3 = { 1, { 4 } };
const ALIGN(16) int32_t tensor_data4[4] = { 1, 50, 1, 16, };
const TfArray<1, int> tensor_dimension4 = { 1, { 4 } };
const ALIGN(8) int32_t tensor_data5[2] = { -1, 400, };
const TfArray<1, int> tensor_dimension5 = { 1, { 2 } };
const ALIGN(16) int32_t tensor_data6[4] = { -4749, 5973, -3300, 1961, };
const TfArray<1, int> tensor_dimension6 = { 1, { 4 } };
const TfArray<1, float> quant6_scale = { 1, { 5.6228927860502154e-05, } };
const TfArray<1, int> quant6_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(16) int8_t tensor_data7[4*400] = { 
  53, 80, 9, -67, -28, -4, -59, 28, -33, -47, -35, 2, -22, 25, 18, 44, 5, 33, -37, -47, 17, 13, -78, 25, -33, -40, -19, -20, -21, 6, -15, 22, 34, 58, -23, -29, -25, 14, -7, 21, -27, -19, -27, -23, 10, 9, 23, 16, 27, 54, -26, -34, 40, 16, -15, 43, -36, -15, 4, -43, 23, -9, 34, 33, 24, 11, -24, -40, -25, 17, 30, 17, -20, -11, -7, -26, 11, 2, 23, 9, -3, 16, -19, -45, -26, -6, 16, 18, 5, 5, 8, 2, -5, -9, 11, 3, -5, 36, -36, -62, 11, 27, 8, 21, -21, -19, -32, -52, 5, 14, 14, 27, 28, 33, -21, -18, -46, 22, -2, 21, 9, 8, -48, -48, -6, 5, 22, 43, 39, 19, 11, 1, 2, -15, -29, 20, 12, -31, -18, 16, -19, -11, 19, 17, 46, 32, 8, 26, -70, 28, -34, 7, -32, -16, -9, 24, -2, -6, 44, 43, 13, 30, -13, -47, -17, 28, -16, 33, -6, 14, -12, -33, 19, -14, 32, 7, 19, 12, -48, -127, -23, 23, -50, 25, -1, 18, -16, -48, 15, 18, 20, 11, -28, -4, -35, -67, 24, 16, -1, 16, 7, 21, -23, -50, 19, 7, -2, -31, 8, 2, -20, 39, -15, 9, -24, 6, -51, -5, -39, -31, -15, -5, 11, -2, 26, 46, -13, -94, 50, 15, -20, -4, -34, 7, -10, -20, -3, 6, -7, 32, 29, 36, -15, -53, -29, 9, -3, 33, -19, 12, -44, -25, -12, -20, 8, -22, 2, 20, -14, -68, -56, 20, -47, 15, -26, -2, -15, -21, 5, 17, 15, 20, 5, 5, -32, -64, 11, 24, 2, 22, -5, 1, -5, -39, -1, -22, 17, -5, -6, 42, -24, -50, 5, 29, -16, 22, -4, -5, -15, -18, 27, 9, 4, 10, -5, 32, -15, -69, -51, 34, -30, 37, -30, -52, -49, -42, 0, 12, 6, 29, 42, 42, 15, -27, -13, 21, 8, 28, -10, 3, -24, -36, 5, -1, 34, 48, 36, 38, 18, -4, 5, 12, -20, 18, -4, -1, -18, 17, 27, 2, 51, 15, 36, 35, -17, -36, 18, 49, 19, 43, 22, -28, 4, 15, 22, 3, 32, 5, 7, 32, -25, -31, -36, 33, -7, 33, -15, -10, -16, -23, 22, 10, 16, 31, 3, 42, 11, 9, -6, 50, -6, 44, 18, 34, -26, 20, 30, -6, 15, 19, 
  -13, -14, 42, -14, -49, -67, -16, -31, -19, -15, 5, 6, -50, 59, -41, 30, 15, 14, 60, 42, -41, -45, -25, -41, -3, -27, -24, 22, -72, 72, -19, 62, 6, 3, 78, -3, -8, -59, -35, -21, -31, -22, -11, 12, -66, 76, -58, 57, 8, 6, 67, 23, -26, -42, -35, -34, -9, -28, 1, 1, -56, 68, -21, 68, -15, -8, 61, 19, -7, -33, -10, -31, -29, -29, -3, -30, -43, 66, -25, 37, -13, -13, 32, 10, -26, -45, -34, -29, 9, -17, -5, -16, -62, 62, -47, 25, -35, -16, 61, -9, -26, -35, -26, -39, -7, -2, -17, -25, -63, 42, -59, 31, -8, -30, 36, 1, -23, -48, -28, -49, -15, -9, 0, -5, -40, 71, -73, -10, -4, 18, 19, -21, -15, -37, -19, -33, -27, -17, -26, -19, -50, 54, -60, 21, -23, -14, 34, -2, -45, -16, -31, -10, -20, -20, -15, -2, -47, 69, -53, 26, -12, -19, 38, -23, -55, -39, -34, -17, -26, -18, -14, -12, -77, 54, -15, -1, -9, 8, 46, 12, -59, -31, -18, -41, -11, -1, -19, 21, -55, 69, -66, 25, 19, 14, 64, -4, -15, -28, -20, -1, 0, -32, -27, 13, -65, 68, -24, 59, 0, -13, 51, -11, -53, -34, -44, -14, -12, -4, -23, -15, -75, 77, -16, 22, -13, -17, 55, 10, 3, -45, -14, -27, -12, -6, -8, -7, -58, 50, -20, 32, -3, 8, 54, 5, -38, -16, -9, -22, -30, -32, -8, -8, -32, 45, -8, 15, -13, -22, 42, -11, 6, -64, -14, -46, -12, -15, -18, 10, -45, 52, -41, 26, -18, -5, 56, 12, -59, -21, -6, -41, 1, -7, 3, -10, -32, 46, -27, 26, -22, -10, 34, -2, -12, -45, -19, -25, -21, -5, -22, -4, -61, 71, -66, 46, -36, -3, 53, 0, -44, -22, 2, -16, -21, 2, -14, -21, -30, 69, -35, 22, -25, -27, 38, 11, -49, -20, -32, -31, -16, -5, -18, -12, -67, 73, -57, 28, -14, -12, 67, -9, -33, -57, -30, -32, -11, -17, 2, 0, -58, 51, -52, 55, -14, -8, 63, 16, -29, -55, -25, -34, -14, -16, -14, -16, -67, 52, -45, 26, 4, -24, 53, 9, -40, -72, -12, -26, -7, -17, -16, 18, -71, 54, -62, 18, -17, -4, 31, -25, -32, -32, -35, -32, -7, -19, -1, -9, -90, 20, -76, 11, 
  28, 14, 16, 75, 25, -54, 51, 5, 36, -28, 48, 56, -5, -42, 16, 12, 49, -7, -11, 85, 66, -6, 51, -8, 16, 9, 27, 42, -7, -32, 6, -46, 7, 1, 11, 50, -15, -29, 11, -3, 24, 6, 17, 64, 1, -33, -9, -27, 26, -28, 2, 39, 6, -7, -7, -35, 21, 6, 12, 24, -26, -8, 7, -13, 40, 24, 14, 80, 13, 9, 3, 0, 1, 30, 15, 36, -8, -47, 19, 10, 23, 14, 9, 85, 27, 2, 15, -2, -5, 7, 12, 27, -17, -57, 6, -7, 55, 4, 23, 54, 37, -40, -3, 10, -5, 6, 16, 47, 2, -35, 20, 9, 29, 14, 3, 15, 43, -34, 16, 6, 25, -30, 38, 15, 2, -61, 7, -12, 11, 13, 2, 4, -7, 9, 19, 4, -12, 1, 0, 1, -13, -28, -4, 13, 25, -7, -12, 33, 12, 10, 15, 26, 2, -14, 24, 1, -11, -44, 21, -8, 11, -8, 19, 74, 14, -9, 8, 5, -8, -9, 29, 35, -4, -57, -13, 12, 44, -3, 8, 61, 42, -38, 32, -3, 4, 4, 44, 25, 16, -30, -6, -35, 38, 7, 14, 85, 27, -17, 1, 1, 16, -17, 26, 78, -7, -22, 23, -4, 4, -18, -22, 21, 45, -1, 29, -11, 21, 24, 20, 11, 15, -58, -13, -47, -23, -23, -16, 19, -16, 16, -5, -1, 6, 7, 4, -1, 11, -38, -23, -39, 17, 20, 22, 21, 7, -14, 3, 3, -16, 5, -13, 24, 6, -34, -12, 29, 39, 22, 5, 47, 29, -4, 18, 4, -6, -10, 14, 32, 8, -44, -21, -5, 20, 18, 13, 27, 26, -9, 3, 9, -12, -8, 17, 19, 12, -48, 12, 15, 34, 7, 14, 29, -34, -44, -4, -10, -28, -8, -25, 48, -31, -66, -6, -3, 26, -9, 23, 55, 61, -34, 58, 6, 17, -8, 39, 54, 11, -59, 0, 17, 7, -26, 12, 17, 61, -14, 24, 17, 10, 19, 37, 6, 10, -34, -6, -45, -2, 4, 20, 41, 32, -9, 28, -6, -3, 18, 29, 15, 26, -51, 16, -16, 28, 2, 19, 51, -6, -49, 38, 7, 14, -11, -2, 17, -11, -40, -50, 8, 36, -10, 9, 28, 68, -62, 14, -9, 16, -7, 10, 29, -6, -53, 22, 11, -4, -6, -16, 18, 42, -26, 11, 1, 13, -14, 55, -8, 8, -38, -1, -32, 
  -79, -58, -105, -102, 25, 35, 29, -1, 2, 57, -8, -42, 21, -14, 17, -83, -49, -40, -76, -81, -41, -2, 21, -2, 3, 17, -14, -53, 6, 12, 0, -55, -43, -41, -80, -68, 27, 22, 10, -2, 8, 33, -1, -66, 23, -1, 7, -66, -25, -16, -32, -43, -14, 20, 12, 8, 16, 48, -6, -13, -3, -10, -30, -56, -52, -33, -46, -90, 3, 17, 6, 4, 14, 23, 27, 9, -5, 2, -15, -108, -29, -15, -70, -50, 1, 30, -7, 9, 18, 29, -4, -32, 14, 2, 11, -70, -33, -46, -49, -20, -55, 20, 2, -15, 27, 47, 17, -5, 26, 3, 28, -51, -23, -45, -57, -9, -14, 8, 17, -6, 9, 32, 6, 19, 38, -3, 17, -62, -26, -36, -41, -12, -5, 26, 27, -12, 41, 53, 22, 23, 39, -5, 32, -17, -2, -42, -30, -2, 34, 37, 48, -10, 49, 33, 15, -19, 5, -35, -28, -78, -45, -23, -37, -63, 10, 11, 26, -4, 24, 35, 12, -17, 32, -5, 52, -45, -10, 6, -33, -19, -7, 38, 6, 9, 17, 10, -16, -4, 35, 11, 0, -28, -34, -16, -36, -103, -46, 25, 7, 8, 8, 26, -2, -46, -4, -1, -24, -30, -13, -14, -52, -46, -29, 26, -13, 20, 3, 21, -24, -32, 10, 27, 3, 1, -10, 5, -27, -2, -36, -2, 10, 10, 16, 14, 41, 5, 5, -3, 7, 12, -48, -31, -86, -18, 19, 29, 8, -5, 13, 26, 22, 16, 37, 7, 5, -40, -28, -10, -62, -37, 9, 22, 26, 24, 16, 42, 7, -6, 20, 3, 6, -70, -5, -12, -15, 4, -17, 29, 27, 26, 1, 37, 8, 0, 24, 14, 7, -24, -45, -29, -51, -48, 5, 4, 17, 1, 29, 43, 46, -50, 24, 1, 18, -43, -18, -43, -58, -29, -51, 28, -10, 9, 14, 23, -4, -4, 20, -2, 4, -42, -29, -26, -75, -21, -46, 17, -18, 3, -10, 23, -7, 3, 3, -4, -30, -68, -50, -32, -99, -59, -47, 4, 2, 21, -29, 5, -21, -1, -5, 11, -14, -46, -68, -30, -99, -59, -9, 30, -7, 26, 24, 37, 9, -28, 4, 16, 5, -51, -38, -2, -78, -20, -52, 25, -20, -2, 24, 29, -24, -3, 37, 16, 5, -84, 14, -5, 1, 18, -49, -3, -25, 3, -22, 11, -54, 23, 32, 5, 26, 0, 
};
const TfArray<2, int> tensor_dimension7 = { 2, { 4,400 } };
const TfArray<1, float> quant7_scale = { 1, { 0.0064170989207923412, } };
const TfArray<1, int> quant7_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(16) int32_t tensor_data8[16] = { -4158, -6412, 7486, -1737, -5931, -2647, -3110, -11368, -453, 1153, -2593, -2009, -4187, 15173, -8630, 3620, };
const TfArray<1, int> tensor_dimension8 = { 1, { 16 } };
const TfArray<16, float> quant8_scale = { 16, { 3.4141405194532126e-05, 2.5860037567326799e-05, 4.3326337618054822e-05, 4.0673712646821514e-05, 3.385579475434497e-05, 4.8771933506941423e-05, 2.8431253667804413e-05, 2.7731921363738365e-05, 3.5605677112471312e-05, 4.5420962123898789e-05, 2.5741937861312181e-05, 3.598242619773373e-05, 3.9559447031933814e-05, 2.7384669010643847e-05, 2.2728207113686949e-05, 2.7206009690416977e-05, } };
const TfArray<16, int> quant8_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const ALIGN(16) int8_t tensor_data9[16*1*3*8] = { 
  /* [0][0][][] */ 11,30,44,33,-51,-12,59,29, -1,0,-7,-19,-36,-10,122,-59, 22,33,3,11,-34,-24,127,18, 
  /* [1][0][][] */ -47,114,11,10,-99,-69,66,22, -82,15,-30,-21,-82,35,76,72, 35,66,14,-71,-127,-43,40,-8, 
  /* [2][0][][] */ 5,-8,-12,-9,-75,-55,90,28, 43,-14,42,4,-73,-65,70,51, 0,4,26,-36,-74,-40,127,3, 
  /* [3][0][][] */ 22,-35,19,6,-29,-25,55,53, 30,-46,-15,69,-21,-21,48,66, -59,-16,-18,-7,2,-24,127,72, 
  /* [4][0][][] */ -35,-51,-48,-51,-127,-43,112,11, -9,-57,-33,-2,-56,89,71,-19, 25,-21,27,20,-102,90,-9,15, 
  /* [5][0][][] */ -38,51,13,46,63,-13,-70,12, -30,42,-21,15,127,54,-81,-23, 1,63,10,34,102,31,-67,-3, 
  /* [6][0][][] */ 55,-24,9,73,-127,24,46,32, -12,-38,22,-55,-71,43,53,54, -25,-42,-50,69,11,64,8,-31, 
  /* [7][0][][] */ -25,107,-12,-76,-127,50,15,-10, 34,84,41,42,-69,31,1,-4, 41,50,-57,-22,-46,8,23,-14, 
  /* [8][0][][] */ 50,-42,42,46,24,31,61,55, -24,-30,-43,42,118,14,-54,85, -61,-32,37,30,127,61,-21,6, 
  /* [9][0][][] */ -26,-23,19,37,127,48,-56,17, -39,-16,-10,-14,121,43,-69,7, -3,-21,-26,46,125,35,-68,29, 
  /* [10][0][][] */ -2,-39,-34,47,-20,-9,127,31, -30,-54,-29,14,-108,-43,13,58, -80,-31,-37,73,60,69,25,103, 
  /* [11][0][][] */ -41,-6,-20,64,12,-23,34,-38, 22,-26,24,-10,56,-67,127,13, -24,-30,-41,50,-72,-45,46,-12, 
  /* [12][0][][] */ -38,43,-49,90,20,37,23,-17, 11,22,-49,25,-23,127,-47,-33, 86,26,23,63,62,6,-38,17, 
  /* [13][0][][] */ 35,-9,-22,-50,-127,13,-50,-60, 40,38,-39,-20,-88,-67,-50,-81, -40,18,66,-25,1,-75,-73,9, 
  /* [14][0][][] */ 35,52,43,5,-127,30,43,-66, -21,114,56,43,-118,19,44,-60, 102,-60,11,121,-96,-36,24,-99, 
  /* [15][0][][] */ 76,105,-11,-45,-99,-42,45,12, 12,41,28,-29,-127,-56,108,33, -66,-19,30,-47,-125,-43,118,13, 
};
const TfArray<4, int> tensor_dimension9 = { 4, { 16,1,3,8 } };
const TfArray<16, float> quant9_scale = { 16, { 0.0050318767316639423, 0.0038113403134047985, 0.0063855829648673534, 0.0059946305118501186, 0.0049897823482751846, 0.0071881734766066074, 0.0041902950033545494, 0.0040872250683605671, 0.0052476860582828522, 0.006694295909255743, 0.0037939343601465225, 0.0053032124415040016, 0.0058304057456552982, 0.0040360456332564354, 0.0033497605472803116, 0.004009714350104332, } };
const TfArray<16, int> quant9_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const ALIGN(16) int32_t tensor_data10[8] = { -14701, -18007, -6202, -11657, 8321, -10999, 1735, -894, };
const TfArray<1, int> tensor_dimension10 = { 1, { 8 } };
const TfArray<8, float> quant10_scale = { 8, { 1.1076240298280027e-05, 1.2752960174111649e-05, 6.6228631112608127e-06, 1.7667163774603978e-05, 3.6489058402366936e-05, 2.6903655452770181e-05, 2.3341845007962547e-05, 1.3845196008333005e-05, } };
const TfArray<8, int> quant10_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const ALIGN(16) int8_t tensor_data11[8*1*3*40] = { 
  /* [0][0][][] */ -2,8,-77,25,-32,24,88,-26,-45,-21,57,-25,51,-76,-72,-17,-27,-30,-18,-77,37,26,70,59,57,-4,19,-60,17,-50,-52,28,1,-37,26,-2,26,-26,29,14, -22,17,-127,45,20,-11,83,29,-18,-25,70,89,-47,66,36,34,52,31,-2,48,-29,87,76,38,20,-27,69,9,67,-5,-32,50,-48,-37,-8,34,67,43,-40,-7, 11,-11,50,-79,19,-92,-79,-39,-64,18,-70,-92,-8,-99,-81,-39,-75,-60,8,-71,8,-57,-26,0,-16,-86,-96,-22,-60,-69,-98,-94,-38,-76,-61,-62,-66,18,6,1, 
  /* [1][0][][] */ -100,-87,-122,40,-20,47,54,49,34,37,-25,0,36,-80,27,-33,-90,-34,70,69,47,9,84,42,46,-30,-28,5,7,11,-26,-76,-3,51,29,40,-50,-72,-62,-118, 32,-13,-106,20,12,74,115,50,32,4,-19,16,23,-83,-75,8,-18,-55,-12,-7,53,104,32,17,-22,1,34,6,33,56,-39,-9,19,89,21,-5,-35,-31,-64,-127, 22,-66,-95,-26,-21,66,120,1,-4,47,-57,69,50,-67,-34,-27,-39,33,64,-4,1,57,9,55,67,73,2,96,25,-37,7,-32,44,-27,-9,54,33,-16,-92,-33, 
  /* [2][0][][] */ 31,95,-123,-65,-124,-127,28,41,-76,-1,33,-114,35,-125,-83,49,52,-96,70,31,102,-16,-22,-3,28,-92,-100,-118,-13,-124,-95,13,-120,47,95,-81,38,-103,-35,-64, -6,-31,-14,-79,-9,-19,24,-83,73,-98,104,-110,-71,4,98,51,-116,-73,66,76,9,91,-63,-19,-72,106,-61,-17,-98,-103,-68,69,-118,16,-46,-73,-125,41,-121,-81, 29,-115,-90,-41,58,-45,100,97,54,-89,-110,-44,18,35,11,56,-97,-97,106,-113,56,38,-90,20,93,-106,0,-77,5,74,32,-48,-3,-107,62,-74,-4,103,-76,-88, 
  /* [3][0][][] */ -127,-78,-74,-91,-33,-102,-50,-20,-29,-71,-21,-78,-8,29,23,30,61,11,4,-5,12,26,18,40,21,48,28,-67,14,20,50,19,-11,-17,-11,-1,-19,28,13,90, -69,-21,-18,-28,-3,-33,-11,-23,17,21,-23,-33,-11,-3,52,17,66,34,-10,17,22,9,-17,47,11,-12,22,-57,-11,-7,71,39,-23,-36,-54,-37,-2,5,102,48, -30,-24,6,-58,-20,-28,-47,-5,-69,-9,35,-63,-33,32,-18,43,36,1,-30,34,-38,11,-40,18,-10,19,32,-16,23,-17,79,-25,-36,-32,-52,-18,13,-3,28,56, 
  /* [4][0][][] */ 32,-103,-89,-1,-30,0,-16,49,-48,-6,-58,-28,-44,0,-13,-19,-55,-31,-3,-4,-23,-25,-15,2,-9,9,5,7,-3,-12,-19,-10,-38,-31,24,7,20,52,16,19, 35,-114,-100,-36,-34,-12,8,26,-30,-4,-54,-39,-72,-4,-7,-40,-56,-23,17,-9,-12,10,25,18,0,36,8,-18,-19,12,-25,0,-49,-47,22,29,16,29,0,11, 44,-127,-108,-36,-36,4,6,35,-44,-5,-61,-37,-49,10,-7,-29,-44,-19,27,13,1,-12,8,-6,2,2,-12,-13,-26,13,7,-36,-11,-25,-13,37,43,47,20,-13, 
  /* [5][0][][] */ -45,-71,-64,14,23,-14,-49,-15,-23,-13,-2,30,1,42,30,21,-17,14,4,12,-17,7,34,-38,-12,-23,-5,-3,-29,24,-25,21,-2,-18,15,10,12,0,45,12, -82,-127,-52,31,20,-17,-45,-34,-40,-43,-12,-13,-3,41,28,19,4,2,31,18,16,1,20,9,-30,10,-30,4,-2,6,-10,-8,-28,4,-22,-1,26,41,16,-1, -27,-95,-35,-10,12,-9,-32,-32,-7,-2,23,15,-7,43,20,30,30,-6,11,-32,15,40,-7,1,-16,-16,14,5,-2,-8,10,25,-11,-33,-21,-17,18,-2,35,47, 
  /* [6][0][][] */ 23,105,49,4,-47,-36,-26,-2,-35,10,-33,-16,11,-19,-34,-19,-7,25,-5,19,1,-5,-26,30,9,6,35,6,2,-9,4,-25,14,-24,-27,4,-62,23,-20,-10, 53,104,124,51,10,62,44,62,40,78,7,37,18,20,2,-6,3,-18,25,54,5,-48,-24,16,-9,41,4,21,-16,-6,31,30,-26,26,-24,15,7,20,-27,-4, -14,30,-12,-78,-127,-91,-41,-14,1,47,-62,-51,23,-40,-64,-33,33,-26,-4,6,11,-52,-5,17,28,2,-25,2,-11,23,-11,1,-5,29,-3,30,-35,-26,-30,19, 
  /* [7][0][][] */ -31,-26,1,-11,-4,-39,-82,-40,-76,-87,-23,-108,-22,-80,-46,-35,-62,-25,-95,-69,-79,-6,-39,-12,53,-5,-23,21,35,45,9,-63,-33,-14,-61,-87,-20,-26,33,-19, -127,-19,-64,-53,-96,-102,-17,-36,-70,-46,-26,-116,-31,-50,-82,-77,-99,-99,-75,-103,-81,-15,37,20,18,-8,-45,12,11,-20,-23,-43,-30,-42,-14,-41,-34,5,-6,9, -50,-50,-59,-46,-71,-77,-39,-61,-76,-35,-71,-59,-101,-20,-14,-9,-36,-40,-46,-68,-76,10,41,35,-22,62,-7,19,-26,36,49,8,-111,-79,-102,-41,-97,-50,33,19, 
};
const TfArray<4, int> tensor_dimension11 = { 4, { 8,1,3,40 } };
const TfArray<8, float> quant11_scale = { 8, { 0.0029273561667650938, 0.0033704990055412054, 0.0017503664130344987, 0.0046692811883985996, 0.0096437474712729454, 0.0071104075759649277, 0.0061690513975918293, 0.0036591675598174334, } };
const TfArray<8, int> quant11_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 0 };
const TfArray<4, int> tensor_dimension12 = { 4, { 1,1,99,40 } };
const TfArray<1, float> quant12_scale = { 1, { 0.0037837009876966476, } };
const TfArray<1, int> quant12_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const TfArray<4, int> tensor_dimension13 = { 4, { 1,1,99,8 } };
const TfArray<1, float> quant13_scale = { 1, { 0.0067850244231522083, } };
const TfArray<1, int> quant13_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const TfArray<4, int> tensor_dimension14 = { 4, { 1,99,1,8 } };
const TfArray<1, float> quant14_scale = { 1, { 0.0067850244231522083, } };
const TfArray<1, int> quant14_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const TfArray<4, int> tensor_dimension15 = { 4, { 1,50,1,8 } };
const TfArray<1, float> quant15_scale = { 1, { 0.0067850244231522083, } };
const TfArray<1, int> quant15_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const TfArray<4, int> tensor_dimension16 = { 4, { 1,1,50,8 } };
const TfArray<1, float> quant16_scale = { 1, { 0.0067850244231522083, } };
const TfArray<1, int> quant16_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const TfArray<4, int> tensor_dimension17 = { 4, { 1,1,50,16 } };
const TfArray<1, float> quant17_scale = { 1, { 0.008762359619140625, } };
const TfArray<1, int> quant17_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 0 };
const TfArray<4, int> tensor_dimension18 = { 4, { 1,50,1,16 } };
const TfArray<1, float> quant18_scale = { 1, { 0.008762359619140625, } };
const TfArray<1, int> quant18_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const TfArray<4, int> tensor_dimension19 = { 4, { 1,25,1,16 } };
const TfArray<1, float> quant19_scale = { 1, { 0.008762359619140625, } };
const TfArray<1, int> quant19_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const TfArray<2, int> tensor_dimension20 = { 2, { 1,400 } };
const TfArray<1, float> quant20_scale = { 1, { 0.008762359619140625, } };
const TfArray<1, int> quant20_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const TfArray<2, int> tensor_dimension21 = { 2, { 1,4 } };
const TfArray<1, float> quant21_scale = { 1, { 0.1802336573600769, } };
const TfArray<1, int> quant21_zero = { 1, { 31 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const TfArray<2, int> tensor_dimension22 = { 2, { 1,4 } };
const TfArray<1, float> quant22_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant22_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const TfLiteReshapeParams opdata0 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs0 = { 2, { 0,1 } };
const TfArray<1, int> outputs0 = { 1, { 12 } };
const TfLiteConvParams opdata1 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 12,11,10 } };
const TfArray<1, int> outputs1 = { 1, { 13 } };
const TfLiteReshapeParams opdata2 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs2 = { 2, { 13,2 } };
const TfArray<1, int> outputs2 = { 1, { 14 } };
const TfLitePoolParams opdata3 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs3 = { 1, { 14 } };
const TfArray<1, int> outputs3 = { 1, { 15 } };
const TfLiteReshapeParams opdata4 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs4 = { 2, { 15,3 } };
const TfArray<1, int> outputs4 = { 1, { 16 } };
const TfLiteConvParams opdata5 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 16,9,8 } };
const TfArray<1, int> outputs5 = { 1, { 17 } };
const TfLiteReshapeParams opdata6 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs6 = { 2, { 17,4 } };
const TfArray<1, int> outputs6 = { 1, { 18 } };
const TfLitePoolParams opdata7 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs7 = { 1, { 18 } };
const TfArray<1, int> outputs7 = { 1, { 19 } };
const TfLiteReshapeParams opdata8 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs8 = { 2, { 19,5 } };
const TfArray<1, int> outputs8 = { 1, { 20 } };
const TfLiteFullyConnectedParams opdata9 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs9 = { 3, { 20,7,6 } };
const TfArray<1, int> outputs9 = { 1, { 21 } };
const TfLiteSoftmaxParams opdata10 = { 1 };
const TfArray<1, int> inputs10 = { 1, { 21 } };
const TfArray<1, int> outputs10 = { 1, { 22 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 3968, (TfLiteIntArray*)&tensor_dimension0, 3960, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data1, (TfLiteIntArray*)&tensor_dimension1, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data2, (TfLiteIntArray*)&tensor_dimension2, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data3, (TfLiteIntArray*)&tensor_dimension3, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data4, (TfLiteIntArray*)&tensor_dimension4, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data5, (TfLiteIntArray*)&tensor_dimension5, 8, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data6, (TfLiteIntArray*)&tensor_dimension6, 16, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant6))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data7, (TfLiteIntArray*)&tensor_dimension7, 1600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant7))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data8, (TfLiteIntArray*)&tensor_dimension8, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant8))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data9, (TfLiteIntArray*)&tensor_dimension9, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant9))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data10, (TfLiteIntArray*)&tensor_dimension10, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant10))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data11, (TfLiteIntArray*)&tensor_dimension11, 960, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant11))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension12, 3960, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant12))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 3968, (TfLiteIntArray*)&tensor_dimension13, 792, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant13))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension14, 792, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant14))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 800, (TfLiteIntArray*)&tensor_dimension15, 400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant15))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension16, 400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant16))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 800, (TfLiteIntArray*)&tensor_dimension17, 800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant17))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension18, 800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant18))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 800, (TfLiteIntArray*)&tensor_dimension19, 400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant19))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension20, 400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant20))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 400, (TfLiteIntArray*)&tensor_dimension21, 4, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant21))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension22, 4, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant22))}, },
};const NodeInfo_t nodeData[] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, const_cast<void*>(static_cast<const void*>(&opdata0)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, const_cast<void*>(static_cast<const void*>(&opdata1)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, const_cast<void*>(static_cast<const void*>(&opdata2)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs4, (TfLiteIntArray*)&outputs4, const_cast<void*>(static_cast<const void*>(&opdata4)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs5, (TfLiteIntArray*)&outputs5, const_cast<void*>(static_cast<const void*>(&opdata5)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs6, (TfLiteIntArray*)&outputs6, const_cast<void*>(static_cast<const void*>(&opdata6)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs7, (TfLiteIntArray*)&outputs7, const_cast<void*>(static_cast<const void*>(&opdata7)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs8, (TfLiteIntArray*)&outputs8, const_cast<void*>(static_cast<const void*>(&opdata8)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs9, (TfLiteIntArray*)&outputs9, const_cast<void*>(static_cast<const void*>(&opdata9)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs10, (TfLiteIntArray*)&outputs10, const_cast<void*>(static_cast<const void*>(&opdata10)), OP_SOFTMAX, },
};

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = 0;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  if (current_location - bytes < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}
typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;
static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  };
  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }
  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }

  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }
  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }
  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }
};

} // namespace

TfLiteStatus tflite_learn_5_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  ctx.impl_ = static_cast<void*>(&micro_context_);
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.tensors_size = 23;
  for (size_t i = 0; i < 23; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }
  registrations[OP_RESHAPE] = Register_RESHAPE();
  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_MAX_POOL_2D] = Register_MAX_POOL_2D();
  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t i = 0; i < 11; ++i) {
    tflNodes[i].inputs = nodeData[i].inputs;
    tflNodes[i].outputs = nodeData[i].outputs;
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
tflNodes[i].custom_initial_data = nullptr;
      tflNodes[i].custom_initial_data_size = 0;
if (registrations[nodeData[i].used_op_index].init) {
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
    }
  }
  for (size_t i = 0; i < 11; ++i) {
    if (registrations[nodeData[i].used_op_index].prepare) {
      ResetTensors();

      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk) {
        return status;
      }
    }
  }
  return kTfLiteOk;
}

static const int inTensorIndices[] = {
  0, 
};
TfLiteStatus tflite_learn_5_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(inTensorIndices[index], tensor);
  return kTfLiteOk;
}

static const int outTensorIndices[] = {
  22, 
};
TfLiteStatus tflite_learn_5_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(outTensorIndices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_invoke() {
  for (size_t i = 0; i < 11; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
